<template>
	<view>
		<tx_live_room ref="roomView" :style="`width: 100%;height: ${screenHeight}px;`"></tx_live_room>
		<tx_live_room ref="linkView" style="position: fixed;width:80px;height:120px;top:10px;right:10px"></tx_live_room>
		<view>
			<view class="arrow-boxs">
				<image class="user-img" :src="storeAvatar"></image>
				<view>
					<text class="id">{{storeName}}</text>
					<text class="text-box">热度&nbsp;&nbsp;{{hotDegree}}</text>
				</view>
				<text class="report_btn" @click="onClickReport()">举报</text>
				<image class="close_btn" @click="onClickExitRoom()" src="~@/static/live-video/close.png"></image>
				<view class="good_primary" v-if="primaryGoodCoverImg">
					<image class="good_primary_icon" :src="primaryGoodCoverImg" @click="gotoPrimaryDetail()"></image>
					<text class="good_primary_text">推&nbsp;&nbsp;荐</text>
				</view>
				<view class="exit_audio_live" v-if="isJoin==='Begin'">
					<image class="exit_audio_live_icon" src="~@/static/live-video/voice.png" @click="onClickJoinAnchor()"></image>
					<text class="exit_audio_live_text">请求连麦</text>
				</view>
				<view class="exit_audio_live" v-if="isJoin==='Waiting'">
					<image class="exit_audio_live_icon" src="~@/static/live-video/more.png"></image>
					<text class="exit_audio_live_text">等待连麦</text>
				</view>
				<view class="exit_audio_live" v-if="isJoin==='End'">
					<image class="exit_audio_live_icon" src="~@/static/live-video/voice_fill.png" @click="onClickExitAnchor()"></image>
					<text class="exit_audio_live_text">退出连麦</text>
				</view>
			</view>
			
			<!-- 这是聊天弹窗 -->
			<chat-view :chatList="chatList"></chat-view>
			
			<!-- 这是功能按钮 -->
			<view v-if="!messageTextVisable">
				<view><text class="but-input" @click="inputClick">跟主播聊些什么？</text></view>
				<image class="but-img but-zhiboshop" src="~@/static/live-video/social-shopify.png" @click="openMark(0)"></image>
				<!-- <image class="but-img but-meiyan" src="~@/static/live-video/meiyan_white.png" @click="openmeiyan"></image> -->
				<!-- <image class="but-img but-qiehuan" src="~@/static/live-video/camera_rotate_white.png" @click="switchCamera"></image> -->
				<!-- <image class="but-img but-dianzan" src="~@/static/live-video/appreciate_fill.png"></image> -->
				<like-button ref="likeBtn" class="but-dianzan" :showImgs="showImgs" src="../../static/live-video/appreciate_fill_white.png" @handleClick="clickLike" width="80" height="80" imgWidth="80" imgHeight="80"></like-button>
				<uni-badge class="img-badge" :text="likeValue" type="success" size="small"></uni-badge>
				
			</view>

			<view v-if="messageTextVisable">
				<input class="but-textarea" maxlength="50" placeholder="输入点什么..." :focus="mTextFocus" @blur="messageTextVisable=false" @input="messageInput" :value="message"/>
				<text class="but-textarea-confirm" @click="onClickSendMsg">发送</text>
			</view>
			
			<!-- 这是商品弹窗 -->
			<uni-popup ref="popup" type="bottom">
				<good-list :storeId="storeId" isStore="notStore"></good-list>
			</uni-popup>
			<!-- 这是举报弹窗 -->
			<uni-popup ref="popupReport" type="radio">
				<uni-popup-radio type="info" title="请选择举报类型" :content="reportList" @confirm="confirmReport" color="#31b630"></uni-popup-radio>
			</uni-popup>
		</view>
	</view>
</template>

<script>
	//LVB插件对象
	var sdkwx = uni.requireNativePlugin('TXMLVB-LiveRoom');
	import $httpLive from '@/js_sdk/zhouWei-request/requestConfigLiveRoom.js';
	import uniPopup from '@/components/uni-popup/uni-popup.vue'
	import uniPopupMessage from '@/components/uni-popup/uni-popup-message.vue'
	import uniPopupDialog from '@/components/uni-popup/uni-popup-dialog.vue'
	import uniPopupRadio from '@/components/uni-popup/uni-popup-radio.vue'
	import chatView from './chat_view.vue'
	import goodList from './good_list_view.vue'
	import likeButton from '@/components/like-button/like-button.vue'
	import uniBadge from "@/components/uni-badge/uni-badge.vue"
	import permision from "@/js_sdk/wa-permission/permission.js"
	export default {
		components: {
			uniPopup,
			uniPopupMessage,
			uniPopupDialog,
			uniPopupRadio,
			chatView,
			goodList,
			likeButton,
			uniBadge
		},
		data() {
			return {
				screenHeight:0,//屏幕高度
				roomID: null,
				storeId: null,
				storeName: null,
				storeAvatar: null,
				chatList: [],
				messageTextVisable: false,
				message: null,
				mTextFocus: false,
				hotDegree: 0,
				showImgs: ['../../static/live-video/favor_fill.png','../../static/live-video/crown_fill.png', '../../static/live-video/cart_fill.png', '../../static/live-video/choiceness_fill.png'],
				isJoin: 'Begin',
				primaryGood: null,
				primaryGoodCoverImg: '',
				likeValue: 0,
				likeValueTmp: 0,
				reportList: [],
			}
		},
		onLoad: function(option) {
			this.screenHeight=wx.getSystemInfoSync().screenHeight;
			console.log(option)
			this.roomID = option.roomID
			this.storeName = option.storeName
			this.storeAvatar = option.storeAvatar
			this.storeId = option.storeId
			//设置事件回调
			var that = this;
			sdkwx.setListener(function(res){
				console.log(res);//通过res.type == 'onXXX' 判断回调方法
				if (res.type == "onDebugLog") {
					return;
				}
				if (res.type == "onAnchorExit") {
					that.onAnchorExit(res.data);
				} else if (res.type == "onKickoutJoinAnchor") {
					that.onKickoutJoinAnchor(res.data);
				} else if (res.type == "onRoomDestroy") {
					that.onRoomDestroy();
				} else if(res.type == "onRecvRoomTextMsg"){
					that.onRecvRoomTextMsg(res.data);
					console.log("我收到消息了");
				} else if (res.type == "onAudienceEnter") { //观众进入
					that.onAudienceEnter(res.data);
				} else if (res.type == "onAudienceExit") { //观众退出
					that.onAudienceExit(res.data);
				} else if (res.type == "onRecvRoomCustomMsg") { //自定义消息
					that.onRecvRoomCustomMsg(res.data);
				}
			});
		},
		mounted() {
			uni.setKeepScreenOn({
			    keepScreenOn: true
			});
			this.enterRoom()
			setInterval(()=>{
				this.timedTask()
			},10000)
			// this.hotDegree = this.hotDegree + 1
			// this.getPrimary()
		},
		onUnload() {
			// this.onClickExitRoom()
			//如果有连麦需要停止连麦
			
		},
		onBackPress(){
			this.exitRoom();
		},
		beforeDestroy() {		
			this.exitRoom();
			//停止本地视频预览
			// liveView.stopLocalPreview();
		},
		methods: {
			enterRoom() {
				var roomView = this.$refs.roomView;
				console.log(this.roomID)
				//进入房间
				const that = this
				roomView.enterRoom(this.roomID, function(res){
					console.log(res);
					if(res.code!==0){
						uni.showToast({
							title: '直播已结束',
							icon: 'none'
						})
					}
					
					//进入房间成功发送一条自定义消息
					let enterMsg = uni.getStorageSync('nickname') + " 进入房间了"
					sdkwx.sendRoomCustomMsg("onAudienceEnter", enterMsg, function(res2){
						console.log(res2);
					});
					
					that.getPrimary()
				});
			},
			onClickExitRoom() {
				this.exitRoom()
				uni.navigateBack({ //uni.navigateTo跳转的返回，默认1为返回上一级
					delta: 1
				});
			},
			exitRoom(){
				uni.setKeepScreenOn({
				    keepScreenOn: false
				});
				//退出房间
				var roomView = this.$refs.roomView;
				roomView.exitRoom(function(res){
					console.log(res);
					//进入房间成功发送一条自定义消息
					let exitMsg = uni.getStorageSync('nickname') + " 离开房间了"
					sdkwx.sendRoomCustomMsg("onAudienceExit", exitMsg, function(res2){
						console.log(res2);
					});
				});
			},
			onAudienceEnter(data) {
				// this.hotDegree = this.hotDegree + 1
			},
			onAudienceExit(data) {
				// this.hotDegree = this.hotDegree - 1
			},
			async onClickJoinAnchor() {
				console.log(1)
				let camera = ''
				let audio = ''
				switch(uni.getSystemInfoSync().platform){
				    case 'android':
				       console.log('运行Android上')
					   camera = await permision.requestAndroidPermission('android.permission.CAMERA')
					   audio = await permision.requestAndroidPermission('android.permission.RECORD_AUDIO')
					   console.log(camera,audio)
					   if(camera!==1 || audio!==1){
					   	uni.showToast({
					   		title: "连麦需获取设备摄像头和音频权限",
					   		icon: "none",
					   		duration: 3000
					   	});
					   	return
					   }
				       break;
				    case 'ios':
				       console.log('运行iOS上')
					   camera = await permision.judgeIosPermission("camera")
					   audio = await permision.judgeIosPermission("record")
					   console.log(camera,audio)
					  //  if(camera!==1 || audio!==1){
							// uni.showModal({
					  //  	        content: "连麦需获取设备摄像头和音频权限",
					  //  	        confirmText: "去设置",
							// 	success: function (res) {
							// 	        if (res.confirm) {
							// 	            console.log('用户点击确定');
							// 				permision.gotoAppPermissionSetting()
							// 	        } else if (res.cancel) {
							// 	            console.log('用户点击取消');
							// 	        }
							// 	    }
					  //  	    });
					  //  	return
					  //  }
				       break;
				    default:
				       console.log('运行在开发者工具上')
				       break;
				}
				this.isJoin = "Waiting"
				var linkView = this.$refs.linkView;
				//请求连麦
				let joinMsg = uni.getStorageSync('nickname') + " 请求连麦"
				let that = this
				sdkwx.requestJoinAnchor(joinMsg, function(res){
					console.log(res);
					if (res.code == 0) {//接收
						//开启本地视频预览
						linkView.startLocalPreview(true);
						//加入连麦
						sdkwx.joinAnchor(function(res2){
							console.log('连麦结果', res2);
							if(res2.code===0){
								uni.showToast({
									title: '连麦成功',
									icon: 'none'
								})
								that.isJoin = 'End'
							}else{
								uni.showToast({
									title: '连麦失败',
									icon: 'none'
								})
								that.isJoin = 'Begin'
								that.onClickExitAnchor()
							}
						});
					} else if (res.code == -8) {//拒绝
						uni.showToast({
							title: '连麦请求被拒绝',
							icon: 'none'
						})
						that.isJoin = 'Begin'
					} else {//错误超时
						uni.showToast({
							title: '连麦请求超时或错误',
							icon: 'none'
						})
						that.isJoin = 'Begin'
					}
				});
			},
			onAnchorExit(data) {
				var linkView = this.$refs.linkView;
				//停止远程视频view
				linkView.stopRemoteView();
				this.isJoin = 'Begin'
			},
			onKickoutJoinAnchor(data){
				var linkView = this.$refs.linkView;
				//停止本地视频
				linkView.stopLocalPreview();
				this.isJoin = 'Begin'
			},
			onClickExitAnchor() {
				//退出连麦
				var linkView = this.$refs.linkView;
				let that = this
				console.log(11)
				sdkwx.quitJoinAnchor(function(res){
					//停止本地视频
					console.log(22)
					linkView.stopLocalPreview();
					console.log("quitJoinAnchor", res);
					that.isJoin = 'Begin'
				});
				//停止本地视频
				console.log(22)
				linkView.stopLocalPreview();
				console.log("~quitJoinAnchor");
				that.isJoin = 'Begin'
				console.log(33)
			},
			messageInput(event) {
				this.message = event.detail.value
			},
			onClickSendMsg() {
				// console.log(this.message)
				if(this.message.trim().length === 0){
					uni.showToast({
						title: '写点什么再发送吧~',
						icon: 'none'
					})
					return
				}
				//发送消息
				sdkwx.sendRoomTextMsg(this.message, function(res){
					console.log("sendRoomTextMsg", res);
				});
				this.messageTextVisable = false
				uni.hideKeyboard()
				this.chatList.push({
					name: uni.getStorageSync('nickname'),
					text: this.message
				})
				this.message = ''
			},
			onRecvRoomTextMsg(data) {
				this.chatList.push({
					name: data.userName,
					text: data.message
				})
			},
			onRoomDestroy() {
				uni.showToast({
					title: '直播结束，3秒后返回...',
					duration: 3000,
					icon: 'none'
				})
				setTimeout(()=>{
					uni.navigateBack({});
				},3000)
			},
			onRecvRoomCustomMsg(data) {
				var cmd = data.cmd;
				// if (cmd == "onAudienceEnter") {
				// 	console.log(data.message);
				// 	this.hotDegree = this.hotDegree + 1
				// 	sdkwx.setCustomInfo(0,'hotDegree',this.hotDegree,function(res){
				// 		console.log(res)
				// 	})
				// 	console.log(this.hotDegree)
				// } else if (cmd == "onAudienceExit") {
				// 	console.log(data.message);
				// 	this.hotDegree = this.hotDegree - 1
				// 	sdkwx.setCustomInfo(0,'hotDegree',this.hotDegree,function(res){
				// 		console.log(res)
				// 	})
				// 	console.log(this.hotDegree)
				if(cmd == "onLikeAdd"){
					console.log(data.message);
					if(parseInt(data.message)>parseInt(this.likeValue)){
						this.likeValue = data.message
						this.likeAnimation(parseInt(data.message)>parseInt(this.likeValue))
					}					
				}
				if(cmd == "onSetPrimaryGood"){
					console.log(data.message);
					this.primaryGood = data.message
				}
				if(cmd == "onSetPrimaryGoodCoverImg"){
					console.log(data.message);
					this.primaryGoodCoverImg = data.message
				}
				if(cmd == "onhotDegreeChange"){
					console.log(data.message);
					this.hotDegree = data.message
				}
			},
			likeAnimation(num){
				for (var i = 0; i < parseInt(num); i++) {
					setTimeout(()=>{
						this.$refs.likeBtn.handleClick({
							"type": "mockClick",
							"timeStamp": new Date().getTime()
						})
					},300*i)
				}
			},
			openMark() {
				this.$refs.popup.open()
			},
			inputClick() {
				this.messageTextVisable = true
				this.mTextFocus = true
			},
			clickLike(){
				console.log('666!')
				this.likeValue = parseInt(this.likeValue) + 1
				this.likeValueTmp = parseInt(this.likeValueTmp) + 1
			},
			
			getPrimary(){
				let that = this
				sdkwx.getCustomInfo(function(res){
					console.log(res)
					if(res.code===0){
						const data = res.data
						that.primaryGood = data.primaryGood
						that.primaryGoodCoverImg = data.primaryGoodCoverImg
						that.hotDegree = data.hotDegree
						that.likeValue = data.likeValue ? parseInt(data.likeValue) : 0
					}
				})
			},
			onClickReport(){
				let httpData = {
					page: 0,
					size: 20,
					type: 'LIVE_INFORM_TYPE'
				};
				$httpLive.get("ishop-basebbs/liveController/findDictsByType", httpData,{
					isPrompt: false
				}).then(res => {
					console.log(res)
					if (res && res.code === 0) {
						res.value.content.forEach(ele=>{
							ele.id = ele.innerCode
							ele.value = ele.innerValue
						})
						this.reportList = res.value.content
					} else {
						uni.showToast({
							title: res.message,
							icon: "none"
						});
					}
				});
				this.$refs.popupReport.open()
			},
			confirmReport(done, value){
				let httpData = {
					storeId: this.roomID.toString(),
					informCode: value
				};
				$httpLive.post("ishop-basebbs/liveController/saveLiveInform", httpData,{
					isPrompt: false
				}).then(res => {
					console.log(res)
					if (res && res.code === 0) {
						uni.showToast({
							title: res.message,
							icon: "none"
						});
					} else {
						uni.showToast({
							title: res.message,
							icon: "none"
						});
					}
				});
				done()
			},
			gotoPrimaryDetail(){
				uni.navigateTo({
					url: '/pages/main-webview/main-webview?goodsId=' + this.primaryGood
					// url: '/pages/main-webview/main-webview?goodsId=55',
				})
			},
			timedTask(){
				if(this.likeValueTmp>0){
					let sendValue = this.likeValueTmp
					this.likeValueTmp = 0;
					sdkwx.sendRoomCustomMsg("onClickLike", sendValue, function(res2){
						console.log(res2);
					});
				}
			}
		}
	}
</script>

<style>
	.but-base {
		position: fixed;
		width: 160rpx;
		height: 76rpx;
		background-color: rgba(49, 182, 48, 0.6);
		line-height: 76rpx;
		font-size: 28rpx;
		color: white;
		text-align: center;
		border-radius: 20upx;
	}
	.close_btn {
		position: fixed;
		top: 50rpx;
		right: 40rpx;
		width: 60rpx;
		height: 60rpx;
	}
	.report_btn {
		position: fixed;
		top: 180rpx;
		left: 30rpx;
		width: 80rpx;
		height: 50rpx;
		font-size: 24rpx;
		line-height: 50rpx;
		background-color: rgba(0, 0, 0, .4);;
		color: #FFFFFF;
		text-align: center;
		border-radius: 12%;
	}
	.exit_audio_live {
		position: fixed;
		top: 280rpx;
		right: 30rpx;
	}
	
	.exit_audio_live_icon {
		width: 70rpx;
		height: 70rpx;
		margin-left: 10rpx;
	}
	
	.exit_audio_live_text {
		font-size: 24rpx;
	}
	
	.good_primary {
		position: fixed;
		top: 230rpx;
		left: 30rpx;
		/* background-color: #000000; */
		/* border-color: #ffffff; */
		/* border-width: 1rpx; */
	}
	
	.good_primary_icon {
		width: 110rpx;
		height: 110rpx;
		margin-bottom: 15rpx;
		border-radius: 15rpx;
	}
	
	.good_primary_text {
		font-size: 26rpx;
		text-align: center;
	}
	
	.img-badge {
		position: fixed;
		right: 20rpx;
		bottom: 80rpx;
/* 		border-width: 1px;
		border-color: #07C160; */
	}
	
	.but-img {
		width: 80rpx;
		height: 80rpx;
		/* background-color: rgba(0, 0, 0, .4); */
		/* border-radius: 40rpx; */
		padding: 12rpx;
	}
	
	.but-qiehuan {
		position: fixed;
		right: 30rpx;
		bottom: 20rpx;
	}
	
	.but-dianzan {
		width: 80rpx;
		height: 80rpx;
		position: fixed;
		right: 40rpx;
		bottom: 20rpx;
		/* background-color: #000000; */
	}
	
	.but-meiyan {
		position: fixed;
		right: 120rpx;
		bottom: 20rpx;
	}
	
	.but-zhiboshop {
		position: fixed;
		left: 30rpx;
		bottom: 20rpx;
		padding: 0rpx;
	}
	
	.but-input {
		position: fixed;
		left: 120rpx;
		bottom: 20rpx;
		background-color: rgba(0, 0, 0, .1);
		width: 400rpx;
		z-index: 10;
		font-size: 28rpx;
		padding: 15rpx 25rpx;
		border-radius: 30rpx;
		color: #AAAAAA !important;
	}
	
	.but-textarea {
		position: fixed;
		bottom: 0rpx;
		width: 642rpx;
		height: 76rpx;
		line-height: 76rpx;
		font-size: 30rpx;
		border-width: 1rpx;
		background-color: white;
		padding: 0upx 10upx;
	}
	
	.but-textarea-confirm {
		position: fixed;
		bottom: 0rpx;
		right: 0rpx;
		width: 110rpx;
		height: 76rpx;
		background-color: #31b630;
		line-height: 76rpx;
		font-size: 28rpx;
		color: white;
		text-align: center;
	}
	
	.arrow-boxs {
		padding: 20rpx 40rpx 20rpx 40rpx;
		align-items: center;
		flex-direction: row;
		position: fixed;
		top: 50rpx;
		left: 30rpx;
		z-index: 10;
		border-radius: 60rpx;
		background-color: rgba(0, 0, 0, .4);
	}
	
	.id {
		font-size: 28rpx;
		color: white;
	}
	
	.text-box {
		font-size: 24rpx;
		color: white;
	}
	
	.user-img {
		margin-right: 10rpx;
		width: 60rpx;
		height: 60rpx;
		border-radius: 50%;
	}
</style>
